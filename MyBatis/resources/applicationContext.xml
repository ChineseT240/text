<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd" >
	

<!-- 引入database配置文件 -->
<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
<property name="location">
<value>classpath:database.properties</value>
</property>
</bean> -->
	<!-- 配置数据源 -->
<!-- 	<bean class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" id="dataSource">

<property name="driverClassName" value="${driver}"/>

<property name="url" value="${url}"/>

<property name="username" value="${user}"/>

<property name="password" value="${password}"/>

</bean> -->

   <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
  <property name="jndiName">
  <value>java:comp/env/jdbc/smbms</value>
  </property>
  </bean> 
                               
  <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
  <property name="jndiName">
  <value>java:comp/env/jdbc/smbms</value>
  </property> 
  </bean>  -->
    
	<!-- 配置sqlSessionFactorybean  --> 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引用数据源组件 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 引用MyBatis配置文件中的配置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 配置sql映射文件信息 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:cn/smbms/dao/**/*.xml</value>
			</list>
		</property>
	</bean> 
  
	<!-- 上机  一
	
	配置SqlSessionTemplate 
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	配置DAO组件并注入SqlSessionTemplate实例
	<bean id="UserMapeer" class="cn.smbms.dao.user.impl.UserMapperimpl">
		<property name="sqlSession" ref="sqlSessionTemplate"></property>
	</bean>

	配置业务文件中的关键代码
	<bean id="UserService" class="cn.smbms.service.user.impl.UserServiceimpl">
		<property name="UserMapper" ref="UserMapeer"></property>
	</bean> -->
	
<!--上机 二>>>>>>>>> 	
<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<bean id="ProviderMapper" class="cn.smbms.dao.provider.impl.ProviderMapperimpl">
	<property name="sqlSessionTemplate" ref="sqlSessionTemplate"></property>
	</bean>
	
	<bean id="ProviderService" class="cn.smbms.service.provider.impl.ProviderServiceimpl">
	<property name="providerMapper" ref="ProviderMapper"></property>
	</bean> -->
	
	<!-- 上机三
	
	 配置DAO 
	<bean id="BillMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="cn.smbms.dao.bill.BillMapper"></property>
	<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.dao.UserMapper"></property>
	<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<bean id="BillService" class="cn.smbms.service.Bill.impl.BillServiceimpl">
	<property name="BillMapper" ref="BillMapper"></property>
	</bean> -->
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="cn.smbms.dao"></property>
	</bean>
	<!-- 配置扫描注解定义的业务bean -->
	<context:component-scan base-package="cn.smbms.service"></context:component-scan>


    <!-- 定义事务管理器-->
	<bean
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		id="txManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--  指定或者说配置事务的方法 transaction-manager:配置事务管理器 
	<tx:advice id="txAdvice" transaction-manager="txManager">
		定义事务的规则 SUPPORTS:你有就执行，没有就算了 REQUIRED:你有就执行，没有就添加事务
		<tx:attributes>
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	定义切面
	<aop:config>
		定义切入点
		<aop:pointcut expression="execution(*cn.smbms.service ..*.*(..))"
			id="serviceMethod" />
		将事务添加进去
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
	</aop:config>  -->
	
	<!-- 如果使用注解事务。必须要添加下面的配置 -->
    <tx:annotation-driven transaction-manager="txManager"/>
	
</beans>  